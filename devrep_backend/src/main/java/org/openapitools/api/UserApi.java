/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import org.openapitools.model.InlineObject;
import org.openapitools.model.InlineObject1;
import org.openapitools.model.InlineResponse200;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-11T19:11:10.487+01:00[Europe/Paris]")

@Validated
@Api(value = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /user/{userId} : Create user
     * This can only be done by the logged in user.
     *
     * @param userId  (required)
     * @param inlineObject1  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Create user", nickname = "createUser", notes = "This can only be done by the logged in user.", response = InlineResponse200.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse200> createUser(@ApiParam(value = "",required=true) @PathVariable("userId") BigDecimal userId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody InlineObject1 inlineObject1) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 0, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ { \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 6, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" }, { \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 6, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" } ], \"lastname\" : \"lastname\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{userId} : Get User by Id
     * Get User by Id
     *
     * @param userId  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Get User by Id", nickname = "getUser", notes = "Get User by Id", response = InlineResponse200.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/user/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> getUser(@ApiParam(value = "",required=true) @PathVariable("userId") BigDecimal userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 0, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ { \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 6, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" }, { \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 6, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" } ], \"lastname\" : \"lastname\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/getUser/{username} : Get user by user name
     * Get the user for the provided name
     *
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     * @param username2  (required)
     * @return successful operation (status code 200)
     *         or Invalid username supplied (status code 400)
     *         or User not found (status code 404)
     */
    @ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "Get the user for the provided name", response = InlineResponse200.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/getUser/{username}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> getUserByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ",required=true) @PathVariable("username") String username,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "username", required = true) String username2) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 0, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ { \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 6, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" }, { \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 6, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" } ], \"lastname\" : \"lastname\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>123456789</id> <isAdmin>true</isAdmin> <name>aeiou</name> <email>aeiou</email> <lastname>aeiou</lastname> <phone>aeiou</phone> <address>aeiou</address> <photo>aeiou</photo> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/isAdmin/{userId} : Check if user is Admin
     * This can only be done by the logged in user.
     *
     * @param userId  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Check if user is Admin", nickname = "isAdmin", notes = "This can only be done by the logged in user.", response = Boolean.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Boolean.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/user/isAdmin/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Boolean> isAdmin(@ApiParam(value = "",required=true) @PathVariable("userId") BigDecimal userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/login : Logs user into the system
     * Logs user into the system
     *
     * @param username The user name for login (required)
     * @param password The password for login in clear text (required)
     * @return successful operation (status code 200)
     *         or Invalid username/password supplied (status code 400)
     */
    @ApiOperation(value = "Logs user into the system", nickname = "loginUser", notes = "Logs user into the system", response = String.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = String.class),
        @ApiResponse(code = 400, message = "Invalid username/password supplied") })
    @RequestMapping(value = "/user/login",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<String> loginUser(@NotNull @ApiParam(value = "The user name for login", required = true) @Valid @RequestParam(value = "username", required = true) String username,@NotNull @ApiParam(value = "The password for login in clear text", required = true) @Valid @RequestParam(value = "password", required = true) String password) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/logout : Logs out current logged in user session
     * Log out user
     *
     * @param username  (required)
     * @param token  (required)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Logs out current logged in user session", nickname = "logoutUser", notes = "Log out user", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/user/logout",
        method = RequestMethod.GET)
    default ResponseEntity<Void> logoutUser(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "username", required = true) String username,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "token", required = true) String token) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{userId} : Updates User by Id
     * Updates User by Id
     *
     * @param userId  (required)
     * @param inlineObject  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Updates User by Id", nickname = "putUserUserId", notes = "Updates User by Id", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/user/{userId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putUserUserId(@ApiParam(value = "",required=true) @PathVariable("userId") BigDecimal userId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject inlineObject) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
