/**
e * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import java.math.BigDecimal;
import java.sql.Statement;

import org.h2.engine.Database;
import org.openapitools.model.InlineObject2;
import org.openapitools.model.InlineObject3;
import org.openapitools.model.InlineResponse2001;
import org.openapitools.model.InlineResponse2002;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.sql.DataSource;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-11T19:11:10.487+01:00[Europe/Paris]")


@Validated
@Api(value = "conference", description = "the conference API")
public interface ConferenceApi {

	
    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /conference : Add a new Conference
     * Adds a new conference
     *
     * @param inlineObject3  (optional)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     *         or Not Implemented (status code 501)
     *         or Bad Gateway (status code 502)
     */
    @Autowired
 	JdbcTemplate database = null;
    
    @ApiOperation(value = "Add a new Conference", nickname = "addConference", notes = "Adds a new conference", tags={ "conference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error"),
        @ApiResponse(code = 501, message = "Not Implemented"),
        @ApiResponse(code = 502, message = "Bad Gateway") })
    @RequestMapping(value = "/conference",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> addConference(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject3 inlineObject3) {
    	database.update("insert into CONFERENCE (id, name) " + "values(?, ?)",
    	        new Object[] {
    	                inlineObject3.getId(), inlineObject3.getName()
    	            });
    	return new ResponseEntity<>(HttpStatus.CREATED);
    }


    /**
     * DELETE /conference/{conferenceId} : Deletes a conference
     * Deletes a conference
     *
     * @param conferenceId Conference id to delete (required)
     * @param apiKey  (optional)
     * @return OK (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Conference not found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Deletes a conference", nickname = "deleteConference", notes = "Deletes a conference", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "conference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Conference not found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/conference/{conferenceId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteConference(@ApiParam(value = "Conference id to delete",required=true) @PathVariable("conferenceId") Long conferenceId,@ApiParam(value = "" ) @RequestHeader(value="api_key", required=false) String apiKey) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /conference/findByStatus : Finds Conferences by status
     * Multiple status values can be provided with comma separated strings
     *
     * @param status Status values that need to be considered for filter (required)
     * @return successful operation (status code 200)
     *         or Invalid status value (status code 400)
     */
    @ApiOperation(value = "Finds Conferences by status", nickname = "findConferencesByStatus", notes = "Multiple status values can be provided with comma separated strings", response = InlineResponse2001.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "conference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2001.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/conference/findByStatus",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<InlineResponse2001>> findConferencesByStatus(@NotNull @ApiParam(value = "Status values that need to be considered for filter", required = true, allowableValues = "available, pending, sold") @Valid @RequestParam(value = "status", required = true) List<String> status) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Conference> <id>123456789</id> <name>doggie</name> <photoUrls>aeiou</photoUrls> <status>aeiou</status> <url>aeiou</url> <date>aeiou</date> <photos>aeiou</photos> </Conference>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /conference/{conferenceId} : Find conference by ID
     * Returns a single conference
     *
     * @param conferenceId ID of conference to return (required)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Conference not found (status code 404)
     */
    @ApiOperation(value = "Find conference by ID", nickname = "getConferenceById", notes = "Returns a single conference", response = InlineResponse2001.class, tags={ "conference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2001.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Conference not found") })
    @RequestMapping(value = "/conference/{conferenceId}",
        produces = { "application/xml", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse2001> getConferenceById(@ApiParam(value = "ID of conference to return",required=true) @PathVariable("conferenceId") Long conferenceId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"date\", \"photoUrls\" : [ \"photoUrls\", \"photoUrls\" ], \"name\" : \"doggie\", \"id\" : 0, \"category\" : [ { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" }, { \"expires\" : \"expires\", \"price\" : 5.962133916683182, \"id\" : 1.4658129805029452, \"category\" : \"category\" } ], \"photos\" : [ \"photos\", \"photos\" ], \"url\" : \"url\", \"admins\" : [ { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" }, { \"address\" : \"address\", \"phone\" : \"phone\", \"name\" : \"name\", \"photo\" : \"photo\", \"id\" : 5, \"isAdmin\" : false, \"email\" : \"email\", \"conferences\" : [ null, null ], \"lastname\" : \"lastname\" } ], \"status\" : \"available\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<Conference> <id>123456789</id> <name>doggie</name> <photoUrls>aeiou</photoUrls> <status>aeiou</status> <url>aeiou</url> <date>aeiou</date> <photos>aeiou</photos> </Conference>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /conference/{conferenceId}/uploadImage : Update Image
     * Upload Conference Image
     *
     * @param conferenceId  (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Update Image", nickname = "putConferenceConferenceIdUploadImage", notes = "Upload Conference Image", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "conference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/conference/{conferenceId}/uploadImage",
        method = RequestMethod.PUT)
    default ResponseEntity<Void> putConferenceConferenceIdUploadImage(@ApiParam(value = "",required=true) @PathVariable("conferenceId") BigDecimal conferenceId) {
        
    	return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /conference : Update an existing Conference
     * Updates a confernece
     *
     * @param inlineObject2  (optional)
     * @return OK (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(value = "Update an existing Conference", nickname = "updateConference", notes = "Updates a confernece", authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "conference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/conference",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateConference(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) InlineObject2 inlineObject2) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /conference/{conferenceId}/uploadImage : Uploads an image for conference
     * Uploads an image for conference
     *
     * @param conferenceId ID of conference to update (required)
     * @param body  (optional)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Uploads an image for conference", nickname = "uploadFile", notes = "Uploads an image for conference", response = InlineResponse2002.class, authorizations = {
        @Authorization(value = "api_key")
    }, tags={ "conference", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = InlineResponse2002.class) })
    @RequestMapping(value = "/conference/{conferenceId}/uploadImage",
        produces = { "application/json" }, 
        consumes = { "application/octet-stream" },
        method = RequestMethod.POST)
    default ResponseEntity<InlineResponse2002> uploadFile(@ApiParam(value = "ID of conference to update",required=true) @PathVariable("conferenceId") Long conferenceId,@ApiParam(value = ""  )  @Valid @RequestBody(required = false) Resource body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 0, \"type\" : \"type\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
